image: busybox:latest

variables:
  INLINE_VARIABLE: "hi I am a custom env_var defined locally in .gitlab-ci.yml"
  SAST_DISABLE_DIND: "true"
  
stages:
  - test
  - build
  - review
  - deploy

# global cache
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - .cache

# global before_script
before_script:
  - mkdir -p .cache
  - export GOPATH="$CI_PROJECT_DIR/.cache"

unit tests:
  image: golang:latest
  stage: test
  script:
    - echo "starting unit tests!"
    - go test -v -cover ./...

# junit example
.junit tests:
  image: golang:latest
  stage: test
  before_script:
    - cd $GOPATH/src
    - mkdir -p gitlab.com/$CI_PROJECT_NAMESPACE
    - cd gitlab.com/$CI_PROJECT_NAMESPACE
    - ln -s $CI_PROJECT_DIR
    - cd $CI_PROJECT_NAME
  script:
    - go get -u github.com/jstemmer/go-junit-report
    - go test -v 2>&1 | go-junit-report > report.xml
  artifacts:
    paths:
      - report.xml
    reports:
      junit: report.xml

code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]
  
environment echoes:
  stage: build
  script:
    - echo "Who am I running as..."
    - whoami
    - echo "Where am I..."
    - pwd
    - ls -al
    - echo "Here's what is available in our environment..."
    - env

environment variables:
  stage: build
  script:
    - echo "Do a test here"
    - echo "Here are some default, global, & local variables..."
    - echo $CI_COMMIT_REF_NAME
    - echo $group_level_variable
    - echo $project_level_variable
    - echo $INLINE_VARIABLE

build app:
  image: golang:latest
  stage: build
  script:
    - go build -o app
  artifacts:
    paths:
      - app
    expire_in: 1 hour

build image:
  image: docker:stable
  stage: build
  variables:
    CONTAINER_BUILD_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  tags:
    - byo-runner
  before_script:
    - docker info
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CONTAINER_BUILD_IMAGE .
    - docker push $CONTAINER_BUILD_IMAGE
  when: manual
  # only:
  #   - schedules

deploy review:
  stage: review
  script:
    - echo "Do your average deploy here"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: never
    - if: '$CI_COMMIT_TAG'
      when: never
    - when: always
  environment:
    name: review/$CI_COMMIT_REF_NAME

deploy release:
  stage: deploy
  script:
    - echo "Deploy to a production environment"
  rules:
    - if: '$CI_COMMIT_REF_NAME != "master" && $CI_COMMIT_TAG'
      when: manual
  environment:
    name: production

deploy staging:
  stage: deploy
  script:
    - echo "Deploy to a staging environment"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always
    - when: never
  environment:
    name: staging

include:
  - template: SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml
